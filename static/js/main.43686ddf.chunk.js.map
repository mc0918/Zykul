{"version":3,"sources":["components/WarfareUnitGenerator/WarfareUnitGenerator.jsx","components/Toolbar/Toolbar.js","components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["WarfareUnitGenerator","useState","unitName","setUnitName","size","setSize","attack","setAttack","defense","setDefense","range","setRange","magic","setMagic","experience","setExperience","renderSlider","label","attribute","setAttribute","minValue","lowerCaseLabel","toLowerCase","className","Grid","container","spacing","alignItems","item","Typography","gutterBottom","Slider","value","onChange","event","newValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","xs","Input","margin","target","Number","onBlur","inputProps","type","id","justify","href","rel","s","trim","replace","TextField","renderTextInput","sizeInput","attackInput","defenseInput","rangeInput","magicInput","experienceInput","sizeStat","calculateSize","attackStat","calculateAttack","defenseStat","Math","floor","calculateDefense","rangeStat","calculateRange","magicStat","expStat","calculateExperience","cost","List","ListItem","renderStatBlock","styles","theme","root","height","breakpoints","up","useStyles","withStyles","Toolbar","makeStyles","title","fontSize","placeholder","toolbarStyles","toolbar","justifyContent","backgroundImage","left","flex","right","display","Header","classes","AppBar","position","Link","variant","underline","color","App","Container","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oVAIaA,EAAuB,WAAO,IAAD,EACNC,mBAAS,IADH,mBAC/BC,EAD+B,KACrBC,EADqB,OAEdF,mBAAS,GAFK,mBAE/BG,EAF+B,KAEzBC,EAFyB,OAGVJ,mBAAS,GAHC,mBAG/BK,EAH+B,KAGvBC,EAHuB,OAIRN,mBAAS,GAJD,mBAI/BO,EAJ+B,KAItBC,EAJsB,OAKZR,mBAAS,GALG,mBAK/BS,EAL+B,KAKxBC,EALwB,OAMZV,mBAAS,GANG,mBAM/BW,EAN+B,KAMxBC,EANwB,OAOFZ,mBAAS,GAPP,mBAO/Ba,EAP+B,KAOnBC,EAPmB,KAUhCC,EAAe,SAACC,EAAOC,EAAWC,EAAcC,GAClD,IAAMC,EAAiBJ,EAAMK,cAsB7B,OACI,yBAAKC,UAAS,UAAKF,EAAL,sBACV,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,UACnC,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACN,yBAAKL,UAAS,UAAKF,EAAL,YACV,kBAACQ,EAAA,EAAD,CAAYC,cAAY,GACnBb,GAEL,kBAACc,EAAA,EAAD,CACIC,MAA4B,kBAAdd,EAAyBA,EAAY,EACnDe,SA9BG,SAACC,EAAOC,GAC/BhB,EAAagB,IA8BOC,kBAAgB,kBAChBC,kBAAkB,OAClBC,KAAM,EACNC,OAAK,EACLC,IAAKpB,EACLqB,IAAK,MAIjB,kBAACjB,EAAA,EAAD,CAAMI,MAAI,EAACc,IAAE,GACT,kBAACC,EAAA,EAAD,CACIpB,UAAS,UAAKF,EAAL,iBACTW,MAAOd,EACP0B,OAAO,QACPX,SAzCM,SAACC,GACvBf,EAAoC,KAAvBe,EAAMW,OAAOb,MAAe,GAAKc,OAAOZ,EAAMW,OAAOb,SAyClDe,OAtCD,WACX7B,EAAY,EAERC,EADS,UAAVF,EACc,EAEJ,GAENC,EAAY,GACnBC,EAAa,IA+BD6B,WAAY,CACRV,KAAM,EACNE,IAAKpB,EACLqB,IAAK,EACLQ,KAAM,SACN,kBAAmB,yBAiI/C,OACI,yBAAKC,GAAG,uBACJ,kBAAC1B,EAAA,EAAD,CAAM0B,GAAG,iBAAiBzB,WAAS,EAACC,QAAS,EAAGyB,QAAQ,eAAexB,WAAW,UAC9E,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACc,GAAI,IACX,yBAAKnB,UAAU,oBACX,sDACA,uBAAG6B,KAAK,mFAAmFP,OAAO,SAASQ,IAAI,uBAA/G,UACA,4CACA,iHACA,4BACI,oCACA,sCACA,uCACA,qCACA,qCACA,2CAEJ,gDACA,sOACA,4BACI,wMACA,4GACA,oKACA,mIACA,kLACA,kOAIZ,kBAAC7B,EAAA,EAAD,CAAMI,MAAI,EAAC0B,EAAG,GACV,kBAAC9B,EAAA,EAAD,CAAMI,MAAI,EAACc,GAAI,IAtJP,SAACzB,EAAOC,EAAWC,GAEvC,IAAME,EAAiBJ,EAAMsC,OAAOC,QAAQ,OAAQ,KAAKlC,cAIzD,OACI,yBAAKC,UAAS,UAAKF,EAAL,qBACV,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,UACnC,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACN,kBAAC6B,EAAA,EAAD,CAAWlC,UAAS,UAAKF,EAAL,UAA6BJ,MAAK,UAAKA,GAASe,MAAOd,EAAWe,SANjF,SAACC,GAAD,OAAWf,EAAae,EAAMW,OAAOb,aAmJzC0B,CAAgB,YAAaxD,EAAUC,IAE5C,kBAACqB,EAAA,EAAD,CAAMI,MAAI,EAACc,GAAI,IACV1B,EAAa,OAAQZ,EAAMC,EAAS,IAEzC,kBAACmB,EAAA,EAAD,CAAMI,MAAI,EAACc,GAAI,IACV1B,EAAa,SAAUV,EAAQC,EAAW,IAE/C,kBAACiB,EAAA,EAAD,CAAMI,MAAI,EAACc,GAAI,IACV1B,EAAa,UAAWR,EAASC,EAAY,IAElD,kBAACe,EAAA,EAAD,CAAMI,MAAI,EAACc,GAAI,IACV1B,EAAa,QAASN,EAAOC,EAAU,IAE5C,kBAACa,EAAA,EAAD,CAAMI,MAAI,EAACc,GAAI,IACV1B,EAAa,QAASJ,EAAOC,EAAU,IAE5C,kBAACW,EAAA,EAAD,CAAMI,MAAI,EAACc,GAAI,IACV1B,EAAa,aAAcF,EAAYC,EAAe,KAI/D,kBAACS,EAAA,EAAD,CAAMI,MAAI,EAAC0B,EAAG,EAAG/B,UAAU,wBAzFf,SAACoC,EAAWC,EAAaC,EAAcC,EAAYC,EAAYC,GACnF,IAAMC,EApEY,SAACN,GACnB,IAAIM,EACJ,OAAQN,GACJ,KAAK,EACDM,EAAW,MACX,MACJ,KAAK,EACDA,EAAW,MACX,MACJ,KAAK,EACDA,EAAW,MACX,MACJ,KAAK,EACDA,EAAW,OACX,MACJ,KAAK,EACDA,EAAW,OACX,MACJ,QACIA,EAAW,yBAInB,OAAOA,EA6CUC,CAAcP,GACzBQ,EA3Cc,SAACP,EAAaI,GAElC,OADmBJ,EAAcI,EA0CdI,CAAgBR,EAAaI,GAC1CK,EAvCe,SAACV,EAAWE,EAAcG,GAG/C,OADoB,GAAKH,GADzBF,EAAYW,KAAKC,MAAMZ,EAAY,IACiBK,EAqChCQ,CAAiBb,EAAWE,EAAcG,GACxDS,EAlCa,SAAAX,GACnB,OAAoB,GAAbA,EAiCWY,CAAeZ,GAC3Ba,EAAYZ,EACZa,EAhCkB,SAAAZ,GACxB,IAAIY,EACJ,OAAQZ,GACJ,KAAK,EACDY,EAAU,QACV,MACJ,KAAK,EACDA,EAAU,UACV,MACJ,KAAK,EACDA,EAAU,WACV,MACJ,KAAK,EACDA,EAAU,UACV,MACJ,KAAK,EACDA,EAAU,QACV,MACJ,QACIA,EAAU,yBAIlB,OAAOA,EASSC,CAAoBb,GAC9Bc,EAAO,IAAMnB,GAAaC,EAAcC,EAAeC,EAAc,EAAIC,GAAeC,EAE9F,OACI,kBAACe,EAAA,EAAD,CAAMxD,UAAU,cACZ,kBAACyD,EAAA,EAAD,CAAUzD,UAAU,QAApB,UACQqD,EADR,YACgC,KAAb1E,EAAkB,gBAAkBA,IAEvD,kBAAC8E,EAAA,EAAD,cACWf,GAEX,kBAACe,EAAA,EAAD,iBACcb,GAEd,kBAACa,EAAA,EAAD,iBACcX,GAEd,kBAACW,EAAA,EAAD,eACYP,EADZ,QAGA,kBAACO,EAAA,EAAD,gBACaL,GAEb,kBAACK,EAAA,EAAD,cACWF,EADX,QA6DKG,CAAgB7E,EAAME,EAAQE,EAASE,EAAOE,EAAOE,O,2DCzP7DoE,EAAS,SAACC,GAAD,MAAY,CAChCC,KAAK,aACHC,OAAQ,IACPF,EAAMG,YAAYC,GAAG,MAAQ,CAC5BF,OAAQ,OCARG,GDKSC,YAAWP,EAAXO,CAAmBC,KCLhBC,aAAW,SAACR,GAAD,MAAY,CACrCS,MAAO,CACHC,SAAU,IAEdC,YAAaC,EAAcZ,GAAOC,KAClCY,QAAS,CACLC,eAAgB,gBAChBC,gBAAiB,+CAErBC,KAAM,CACFC,KAAM,GAEVC,MAAO,CACHD,KAAM,EACNE,QAAS,OACTL,eAAgB,iBAIXM,EAAS,WAClB,IAAMC,EAAUhB,IAEhB,OACI,6BACI,kBAACiB,EAAA,EAAD,CAAQC,SAAS,SACb,kBAAChB,EAAA,EAAD,CAASnE,UAAWiF,EAAQR,SACxB,qCAGA,yBAAKzE,UAAWiF,EAAQL,OACxB,kBAACQ,EAAA,EAAD,CACIC,QAAQ,KACRC,UAAU,OACVC,MAAM,UACNvF,UAAWiF,EAAQZ,MACnBxC,KAAK,KAEJ,sBAEL,yBAAK7B,UAAWiF,EAAQH,OAAxB,a,SCvBLU,E,uKAbT,OACI,yBAAKxF,UAAU,iBACb,yBAAKA,UAAU,oBACb,kBAAC,EAAD,OAEF,kBAACyF,EAAA,EAAD,CAAWzF,UAAU,qBACnB,kBAAC,EAAD,Y,GAVI0F,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43686ddf.chunk.js","sourcesContent":["import './WarfareUnitGenerator.css'\r\nimport React, { useState } from 'react';\r\nimport {Slider, Typography, Grid, Input, List, ListItem, TextField } from '@material-ui/core';\r\n\r\nexport const WarfareUnitGenerator = () => {\r\n    const [unitName, setUnitName] = useState(\"\")\r\n    const [size, setSize] = useState(1);\r\n    const [attack, setAttack] = useState(1);\r\n    const [defense, setDefense] = useState(1);\r\n    const [range, setRange] = useState(1);\r\n    const [magic, setMagic] = useState(0);\r\n    const [experience, setExperience] = useState(1);\r\n\r\n    //minValue argument is necessary because magic stat can go to 0 while the others should stop at 1\r\n    const renderSlider = (label, attribute, setAttribute, minValue) => {\r\n        const lowerCaseLabel = label.toLowerCase()\r\n\r\n        const handleSliderChange = (event, newValue) => {\r\n            setAttribute(newValue)\r\n        };\r\n\r\n        const handleInputChange = (event) => {\r\n            setAttribute(event.target.value === '' ? '' : Number(event.target.value));\r\n        };\r\n\r\n        const handleBlur = () => {\r\n            if (attribute < 1) {\r\n                if(label === 'Magic'){\r\n                    setAttribute(0)\r\n                } else {\r\n                setAttribute(1);\r\n                }\r\n            } else if (attribute > 5) {\r\n                setAttribute(5);\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div className={`${lowerCaseLabel}-slider-container`}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item >\r\n                        <div className={`${lowerCaseLabel}-slider`}>\r\n                            <Typography gutterBottom>\r\n                                {label}\r\n                            </Typography>\r\n                            <Slider\r\n                                value={typeof attribute === 'number' ? attribute : 1}\r\n                                onChange={handleSliderChange}\r\n                                aria-labelledby=\"discrete-slider\"\r\n                                valueLabelDisplay=\"auto\"\r\n                                step={1}\r\n                                marks\r\n                                min={minValue}\r\n                                max={5}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Input\r\n                            className={`${lowerCaseLabel}-slider-input`}\r\n                            value={attribute}\r\n                            margin=\"dense\"\r\n                            onChange={handleInputChange}\r\n                            onBlur={handleBlur}\r\n                            inputProps={{\r\n                                step: 1,\r\n                                min: minValue,\r\n                                max: 5,\r\n                                type: 'number',\r\n                                'aria-labelledby': 'discrete-slider',\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const renderTextInput = (label, attribute, setAttribute) => {\r\n        //regex to replace spaces with dashes\r\n        const lowerCaseLabel = label.trim().replace(/\\s+/g, '-').toLowerCase()\r\n\r\n        const handleChange = (event) => setAttribute(event.target.value)\r\n\r\n        return (\r\n            <div className={`${lowerCaseLabel}-field-container`}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item >\r\n                        <TextField className={`${lowerCaseLabel}-field`} label={`${label}`} value={attribute} onChange={handleChange} />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const calculateSize = (sizeInput) => {\r\n        let sizeStat;\r\n        switch (sizeInput) {\r\n            case 1:\r\n                sizeStat = '1d4';\r\n                break;\r\n            case 2:\r\n                sizeStat = '1d6';\r\n                break;\r\n            case 3:\r\n                sizeStat = '1d8';\r\n                break;\r\n            case 4:\r\n                sizeStat = '1d10';\r\n                break;\r\n            case 5:\r\n                sizeStat = '1d12';\r\n                break;\r\n            default:\r\n                sizeStat = \"you shouldn't get here\"\r\n                break;\r\n        }\r\n\r\n        return sizeStat;\r\n    };\r\n\r\n    const calculateAttack = (attackInput, experienceInput) => {\r\n        const attackStat = attackInput + experienceInput;\r\n        return attackStat;\r\n    };\r\n\r\n    const calculateDefense = (sizeInput, defenseInput, experienceInput) => {\r\n        sizeInput = Math.floor(sizeInput / 2);\r\n        const defenseStat = 10 + defenseInput + sizeInput + experienceInput;\r\n        return defenseStat;\r\n    };\r\n\r\n    const calculateRange = rangeInput => {\r\n        return rangeInput * 30;\r\n    };\r\n\r\n    const calculateExperience = experienceInput => {\r\n        let expStat;\r\n        switch (experienceInput) {\r\n            case 1:\r\n                expStat = 'Green';\r\n                break;\r\n            case 2:\r\n                expStat = 'Regular';\r\n                break;\r\n            case 3:\r\n                expStat = 'Seasoned';\r\n                break;\r\n            case 4:\r\n                expStat = 'Veteran';\r\n                break;\r\n            case 5:\r\n                expStat = 'Elite';\r\n                break;\r\n            default:\r\n                expStat = \"you shouldn't get here\"\r\n                break;\r\n        }\r\n\r\n        return expStat;\r\n    }\r\n\r\n    const renderStatBlock = (sizeInput, attackInput, defenseInput, rangeInput, magicInput, experienceInput) => {\r\n        const sizeStat = calculateSize(sizeInput);\r\n        const attackStat = calculateAttack(attackInput, experienceInput);\r\n        const defenseStat = calculateDefense(sizeInput, defenseInput, experienceInput);\r\n        const rangeStat = calculateRange(rangeInput);\r\n        const magicStat = magicInput;\r\n        const expStat = calculateExperience(experienceInput);\r\n        const cost = 100 * sizeInput * (attackInput + defenseInput + rangeInput + (3 * magicInput)) * experienceInput;\r\n\r\n        return (\r\n            <List className=\"stat-block\">\r\n                <ListItem className=\"name\">\r\n                    {`${expStat} ${unitName === \"\" ? \"Default Units\" : unitName}`}\r\n                </ListItem>\r\n                <ListItem>\r\n                    Size: {sizeStat}\r\n                </ListItem>\r\n                <ListItem>\r\n                    Attack: +{attackStat}\r\n                </ListItem>\r\n                <ListItem>\r\n                    Defense: {defenseStat}\r\n                </ListItem>\r\n                <ListItem>\r\n                    Range: {rangeStat} ft.\r\n                    </ListItem>\r\n                <ListItem>\r\n                    Magic: +{magicStat}\r\n                </ListItem>\r\n                <ListItem>\r\n                    Cost: {cost} GP\r\n                    </ListItem>\r\n            </List>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id=\"generator-container\">\r\n            <Grid id=\"grid-container\" container spacing={2} justify=\"space-evenly\" alignItems=\"center\">\r\n                <Grid item xs={12}>\r\n                    <div className=\"page-description\">\r\n                        <h1>Warfare Unit Generator</h1>\r\n                        <a href=\"https://github.com/stevenzych/dnd_units/blob/master/warfare_unit_generator.ipynb\" target=\"_blank\" rel=\"noopener noreferrer\">source</a>\r\n                        <h3>Introduction</h3>\r\n                        <p>This generator takes in six values and creates combat-ready units. The values are:</p>\r\n                        <ol>\r\n                            <li>size</li>\r\n                            <li>attack</li>\r\n                            <li>defense</li>\r\n                            <li>range</li>\r\n                            <li>magic</li>\r\n                            <li>experience</li>\r\n                        </ol>\r\n                        <h3>Meaning of Stats</h3>\r\n                        <p>Not all the stats are returned \"straight,\" per se. Some are modified by other stats before being returned in the final stat block. Theses modifications, as well as simple definitions, are as follows.</p>\r\n                        <ul>\r\n                            <li>Size (siz): Determines a units health and is returned as common die. A unit of size 1 (1d4), can get hit 4 times in a battle, and then dies. Size multiplies total cost.</li>\r\n                            <li>Attack (atk + exp): A modifier for d20 rolls made against opponents defense.</li>\r\n                            <li>Defense (10 + dfn + siz//2 + exp): Basically armor class. If an attack matches or exceeds a unit's defense, the unit takes 1 damage.</li>\r\n                            <li>Range (rng * 30): How far a unit can attack (in feet). Each tile at this scale is 30 ft. on a side.</li>\r\n                            <li>Magic (mag): A modifier for d20 rolls made against magic defense (mag + dfn//2). Rolls that beat magic defense deal 1 damage. Very expensive stat.</li>\r\n                            <li>Experience (exp): A more experienced unit attacks and defends better. Some special skills and features are only accessible to certain experience level units. Experience multiplies total cost.</li>\r\n                        </ul>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item s={6} >\r\n                    <Grid item xs={12}>\r\n                        {renderTextInput(\"Unit Name\", unitName, setUnitName)}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {renderSlider(\"Size\", size, setSize, 1)}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {renderSlider(\"Attack\", attack, setAttack, 1)}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {renderSlider(\"Defense\", defense, setDefense, 1)}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {renderSlider(\"Range\", range, setRange, 1)}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {renderSlider(\"Magic\", magic, setMagic, 0)}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {renderSlider(\"Experience\", experience, setExperience, 1)}\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item s={6} className=\"stat-block-container\">\r\n                    {renderStatBlock(size, attack, defense, range, magic, experience)}\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","import { withStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nexport const styles = (theme) => ({\r\n  root: {\r\n    height: 64,\r\n    [theme.breakpoints.up('sm')]: {\r\n      height: 70,\r\n    },\r\n  },\r\n});\r\n\r\nexport default withStyles(styles)(Toolbar);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Link from '@material-ui/core/Link';\r\nimport { styles as toolbarStyles } from '../Toolbar/Toolbar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        fontSize: 24,\r\n    },\r\n    placeholder: toolbarStyles(theme).root,\r\n    toolbar: {\r\n        justifyContent: 'space-between',\r\n        backgroundImage: 'linear-gradient(to right, #626262, #28282A)'\r\n    },\r\n    left: {\r\n        flex: 1,\r\n    },\r\n    right: {\r\n        flex: 1,\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n    },\r\n}));\r\n\r\nexport const Header = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar className={classes.toolbar}>\r\n                    <div>\r\n                        menu\r\n                    </div>\r\n                    <div className={classes.left} />\r\n                    <Link\r\n                        variant=\"h1\"\r\n                        underline=\"none\"\r\n                        color=\"inherit\"\r\n                        className={classes.title}\r\n                        href=\"/\"\r\n                    >\r\n                        {'Zykul Game Concept'}\r\n                    </Link>\r\n                    <div className={classes.right}>\r\n                        logo?\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport { WarfareUnitGenerator } from './components/WarfareUnitGenerator/WarfareUnitGenerator';\r\nimport './App.css'\r\nimport { Header } from './components/Header/Header';\r\nimport { Container } from '@material-ui/core';\r\n\r\nclass App extends Component {\r\n\r\n\r\n  render(){\r\n      return(\r\n          <div className=\"app-container\">\r\n            <div className=\"header-container\">\r\n              <Header />\r\n            </div>\r\n            <Container className=\"content-container\">\r\n              <WarfareUnitGenerator />\r\n            </Container>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}